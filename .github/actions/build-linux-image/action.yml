name: build-image

description: Build Linux image

inputs:
  tag: {type: string, required: true, description: Image tag}
  arch: {type: string, required: true, description: Image arch}
  repo: {type: string, required: true, description: Image repo}
  push: {type: string, required: true, description: Whether to push the image}
  retries: {type: string, default: '10', description: Number of times to retry the container build}
  syft_ver: {type: string, required: false, description: Syft version for SBOM feature (default 'latest')}

outputs:
  hash_amd64:
    value: "${{ steps.build.outputs.hash_amd64 }}"
  hash_arm64:
    value: "${{ steps.build.outputs.hash_arm64 }}"

runs:
  using: composite
  steps:

    - name: Copy common scripts into features
      uses: ./.github/actions/copy-common-scripts

    - name: Install devcontainers CLI
      uses: ./.github/actions/install-devcontainers-cli

    - id: build
      name: Build ${{ inputs.repo }}:${{ inputs.tag }}-${{ inputs.arch }}
      shell: bash
      env:
        NODE_NO_WARNINGS: 1
        arch: "${{ inputs.arch }}"
        push: "${{ inputs.push }}"
        repo: "${{ inputs.repo }}"
        retries: "${{ inputs.retries }}"
        tag: "${{ inputs.tag }}"
        syft_ver: "${{ inputs.syft_ver }}"
      run: |
        set -euo pipefail;

        declare i=0;
        declare -a outputs=();

        if test "${push}" = true; then
          outputs+=(--output "type=image,compression=zstd,force-compression=true,oci-mediatypes=true,push=true,push-by-digest=true,name=${repo}");
          # HACK: remove the `-t` arg from the `docker buildx build` command generated by `devcontainer build`
          sed -i 's/,t.map(v=>l.push("-t",v))//g' "$(npm list -g | head -n1)"/node_modules/@devcontainers/cli/dist/spec-node/devContainersSpecCLI.js;
        fi

        until devcontainer build \
          --platform "linux/${arch}" \
          --no-cache \
          --image-name "${repo,,}:${tag}" \
          --workspace-folder "$(realpath -m ./image)" \
          ${syft_ver:+--build-arg SYFT_VER=${syft_ver}} \
          "${outputs[@]}" 2>&1 \
        | tee "${{ runner.temp }}/${arch}.log" 1>&2
        do
          if test "${i}" -lt "${retries}"; then
            j=$((i++));
            t=$((i * i * 5));
            echo "Attempt $j failed! Trying again in $t seconds...";
            sleep $t;
          else
            echo "Failed to build ${repo,,}:${tag}";
            exit 1;
          fi
        done

        if test "${push}" = true; then
          echo "hash_${arch}=$(grep 'exporting manifest sha256:' "${{ runner.temp }}/${arch}.log" | tail -n1 | grep -oP 'sha256:\w+')" >> "$GITHUB_OUTPUT";
        else
          echo "hash_${arch}=" >> "$GITHUB_OUTPUT";
        fi
