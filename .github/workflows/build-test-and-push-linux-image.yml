name: Build and test devcontainer images

on:
  workflow_call:
    inputs:
      os:
        type: string
        required: true
        description: Image OS
      repo:
        type: string
        required: true
        description: Image repo
      push:
        type: string
        required: false
        default: false
        description: Whether to push the image
      features:
        type: string
        required: true
        description: JSON list of devcontainer features
      container_env:
        type: string
        required: false
        description: JSON map of default envvars to build into the devcontainer
      syft_ver:
        type: string
        required: false
        default: latest
        description: Syft version for SBOM generation

jobs:

  build-test-and-upload:
    name: ${{ matrix.arch }}
    runs-on: ${{ fromJSON(github.repository != 'rapidsai/devcontainers' && '"ubuntu-latest"' || format('"linux-{0}-cpu4"', matrix.arch)) }}
    strategy:
      fail-fast: false
      matrix:
        arch: [amd64, arm64]
    outputs:
      hash_amd64: ${{ steps.build.outputs.hash_amd64 }}
      hash_arm64: ${{ steps.build.outputs.hash_arm64 }}
      tag: ${{ steps.json.outputs.tag }}
    steps:
      - name: Checkout ${{ github.repository }}
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Setup runner environment
        uses: ./.github/actions/setup-runner-env

      - id: json
        name: Write .devcontainer.json
        uses: ./.github/actions/devcontainer-json
        with:
          os: "${{ inputs.os }}"
          features: "${{ inputs.features }}"
          container_env: "${{ inputs.container_env }}"
          syft_ver: "${{ inputs.syft_ver }}"

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.GPUCIBOT_DOCKERHUB_USER || vars.DOCKERHUB_USER }}
          password: ${{ secrets.GPUCIBOT_DOCKERHUB_TOKEN || secrets.DOCKERHUB_TOKEN }}

      - id: build
        name: Build ${{ steps.json.outputs.tag }}-${{ matrix.arch }}
        uses: ./.github/actions/build-linux-image
        with:
          arch: "${{ matrix.arch }}"
          repo: "${{ inputs.repo }}"
          push: "${{ inputs.push }}"
          tag: "${{ steps.json.outputs.tag }}"
          syft_ver: "${{ inputs.syft_ver }}"

  push-to-dockerhub:
    if: inputs.push == 'true'
    name: Push to Docker Hub
    needs:
      - build-test-and-upload
    runs-on: ubuntu-latest
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.GPUCIBOT_DOCKERHUB_USER || vars.DOCKERHUB_USER }}
          password: ${{ secrets.GPUCIBOT_DOCKERHUB_TOKEN || secrets.DOCKERHUB_TOKEN }}

      - name: Push multiarch manifest to Docker Hub
        shell: bash --noprofile --norc -x -eo pipefail {0}
        env:
          hash_amd64: "${{ needs.build-test-and-upload.outputs.hash_amd64 }}"
          hash_arm64: "${{ needs.build-test-and-upload.outputs.hash_arm64 }}"
          name: "${{ inputs.repo }}:${{ needs.build-test-and-upload.outputs.tag }}"
          os: "${{ inputs.os }}"
        run: |
          # Ensure name is lowercase
          name="${name,,}";
          docker manifest rm "${name}" || true;
          sleep 5;
          # Create and push the multiarch manifest
          docker buildx imagetools create --tag "${name}" "$hash_amd64" "$hash_arm64";
          sleep 5;
          # Create and push the multiarch manifest without the OS in the tag
          docker buildx imagetools create --tag "${name/%-${os//:/}}" "$hash_amd64" "$hash_arm64";
