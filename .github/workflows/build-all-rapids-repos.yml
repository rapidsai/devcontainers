name: Build all RAPIDS repositories

on:
  schedule:
    - cron: '0 0 * * *'
  workflow_call:
    inputs:
      env:
        description: |
          Additional environment variables to be set inside the devcontainer.
          Should be a space-delimited string in the form "KEY=value".
        type: string

jobs:
  check-event:
    name: Check GH Event
    runs-on: ubuntu-latest
    outputs:
      ok: ${{ steps.check_gh_event.outputs.ok }}
    steps:
      - id: check_gh_event
        name: Check GH Event
        shell: bash
        run: |
          [[ '${{ github.event_name }}' == 'push' && '${{ github.repository }}' == 'rapidsai/devcontainers' ]] || \
          [[ '${{ github.event_name }}' == 'schedule' && '${{ github.repository }}' == 'rapidsai/devcontainers' ]] || \
          [[ '${{ github.event_name }}' == 'pull_request' && '${{ github.repository }}' != 'rapidsai/devcontainers' ]] \
          && echo "ok=true"  | tee -a "$GITHUB_OUTPUT" \
          || echo "ok=false" | tee -a "$GITHUB_OUTPUT";

  build-all-rapids-repos:
    name: RAPIDS
    timeout-minutes: 720
    if: needs.check-event.outputs.ok == 'true'
    needs: check-event
    permissions:
      actions: read
      packages: read
      id-token: write
      contents: read
      pull-requests: read

    runs-on: "linux-${{ matrix.CPU_ARCH }}-cpu32"
    strategy:
      fail-fast: false
      matrix:
        CPU_ARCH: ["amd64", "arm64"]
        CUDA_VER: ["12.9"]
        PACKAGER: ["conda", "pip"]
        # 1. No conda progress bar
        # 2. Infinitely retry transient errors
        # 3. Enable debug logging to track cache misses
        # 4. Never fallback to locally compiling
        # 5. Use RAPIDS_AUX_SECRET_1 as the sccache-dist auth token
        ENVIRONMENT:
          - |
            SCCACHE_DIRECT=false
            CONDA_ENV_CREATE_QUIET=1
            SCCACHE_DIST_MAX_RETRIES=inf
            SCCACHE_SERVER_LOG=sccache=debug
            SCCACHE_DIST_FALLBACK_TO_LOCAL_COMPILE=false
            ${{ inputs.env }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          path: repo
          fetch-depth: 0
          persist-credentials: true

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - uses: aws-actions/configure-aws-credentials@b47578312673ae6fa5b5096b330d9fbac3d116df # v4.2.1
        with:
          role-to-assume: ${{ vars.AWS_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION }}
          role-duration-seconds: 43200 # 12h

      - name: Set up env
        shell: bash
        run: |
          echo "ARTIFACT_SLUG=${{ github.run_id }}-${{ github.run_attempt }}-$RANDOM" >> "${GITHUB_ENV}"

      - name: Set up proxy cache
        uses: nv-gha-runners/setup-proxy-cache@main
        continue-on-error: true

      - name: Set up sccache preprocessor cache
        id: sccache-preprocessor-cache
        uses: actions/cache@v4
        with:
          path: .cache/sccache
          restore-keys: sccache-preprocessor-cache-${{ runner.os }}-cuda${{ matrix.CUDA_VER }}-${{ matrix.PACKAGER }}-${{ matrix.CPU_ARCH }}
          key: sccache-preprocessor-cache-${{ runner.os }}-cuda${{ matrix.CUDA_VER }}-${{ matrix.PACKAGER }}-${{ matrix.CPU_ARCH }}-${{ env.ARTIFACT_SLUG }}

      - name: Set up sccache-dist client toolchains cache
        id: sccache-dist-toolchains-cache
        uses: actions/cache@v4
        with:
          path: .cache/sccache-dist-client
          restore-keys: sccache-toolchains-cache-${{ runner.os }}-cuda${{ matrix.CUDA_VER }}-${{ matrix.PACKAGER }}-${{ matrix.CPU_ARCH }}
          key: sccache-toolchains-cache-${{ runner.os }}-cuda${{ matrix.CUDA_VER }}-${{ matrix.PACKAGER }}-${{ matrix.CPU_ARCH }}-${{ env.ARTIFACT_SLUG }}

      - name: Configure all
        uses: ./repo/.github/actions/build-in-devcontainer
        with:
          arch: ${{ matrix.CPU_ARCH }}
          cuda: ${{ matrix.CUDA_VER }}
          python_package_manager: ${{ matrix.PACKAGER }}
          env: |
            ${{ matrix.ENVIRONMENT }}
            SCCACHE_DIST_AUTH_TOKEN=${{ secrets.GIST_REPO_READ_ORG_GITHUB_TOKEN }}
          build_command: |

            if ! pgrep ssh-agent >/dev/null 2>&1; then eval "$(ssh-agent -s)"; fi;
            ssh-add - <<< '${{ secrets.CUMLPRIMS_SSH_PRIVATE_DEPLOY_KEY }}';
            devcontainer-utils-init-ssh-deploy-keys || true;

            mkdir -p ~/.config/pip/;
            cat <<EOF >> ~/.config/pip/pip.conf
            [global]
            extra-index-url = https://pypi.anaconda.org/rapidsai-wheels-nightly/simple
            EOF

            # Clone all the repos
            clone-all -j$(nproc) -v -q --clone-upstream --depth 1 --single-branch --shallow-submodules;

            # Generate scripts
            rapids-generate-scripts;

            # Create python environment
            rapids-make-${PYTHON_PACKAGE_MANAGER}-env;

            # Configure all the C++ libs
            time configure-all            \
              -j                          \
              -GNinja                     \
              -Wno-dev                    \
              -DBUILD_TESTS=ON            \
              -DBUILD_BENCHMARKS=ON       \
              -DBUILD_PRIMS_BENCH=ON      \
              -DBUILD_SHARED_LIBS=ON      \
              -DRAFT_COMPILE_LIBRARY=ON   \
              -DBUILD_CUGRAPH_MG_TESTS=ON ;

      - name: Build rmm, ucxx, kvikio
        uses: ./repo/.github/actions/build-in-devcontainer
        with:
          arch: ${{ matrix.CPU_ARCH }}
          cuda: ${{ matrix.CUDA_VER }}
          python_package_manager: ${{ matrix.PACKAGER }}
          env: |
            ${{ matrix.ENVIRONMENT }}
            SCCACHE_DIST_AUTH_TOKEN=${{ secrets.GIST_REPO_READ_ORG_GITHUB_TOKEN }}
          build_command: |
            time build-rmm-cpp -j
            time build-ucxx-cpp -j
            time build-ucxx-python-cpp -j
            time build-kvikio-cpp -j

      - name: Build cudf
        uses: ./repo/.github/actions/build-in-devcontainer
        with:
          arch: ${{ matrix.CPU_ARCH }}
          cuda: ${{ matrix.CUDA_VER }}
          python_package_manager: ${{ matrix.PACKAGER }}
          env: |
            ${{ matrix.ENVIRONMENT }}
            SCCACHE_DIST_AUTH_TOKEN=${{ secrets.GIST_REPO_READ_ORG_GITHUB_TOKEN }}
          build_command: |
            time build-cudf-cpp -j
            time build-cudf_kafka-cpp -j

      - name: Build raft
        uses: ./repo/.github/actions/build-in-devcontainer
        with:
          arch: ${{ matrix.CPU_ARCH }}
          cuda: ${{ matrix.CUDA_VER }}
          python_package_manager: ${{ matrix.PACKAGER }}
          env: |
            ${{ matrix.ENVIRONMENT }}
            SCCACHE_DIST_AUTH_TOKEN=${{ secrets.GIST_REPO_READ_ORG_GITHUB_TOKEN }}
          build_command: |
            time build-rapidsmpf-cpp -j
            time build-raft-cpp -j

      - name: Build cuvs
        uses: ./repo/.github/actions/build-in-devcontainer
        with:
          arch: ${{ matrix.CPU_ARCH }}
          cuda: ${{ matrix.CUDA_VER }}
          python_package_manager: ${{ matrix.PACKAGER }}
          env: |
            ${{ matrix.ENVIRONMENT }}
            SCCACHE_DIST_AUTH_TOKEN=${{ secrets.GIST_REPO_READ_ORG_GITHUB_TOKEN }}
          build_command: |
            time build-cuvs-cpp -j

      - name: Build cuml
        uses: ./repo/.github/actions/build-in-devcontainer
        with:
          arch: ${{ matrix.CPU_ARCH }}
          cuda: ${{ matrix.CUDA_VER }}
          python_package_manager: ${{ matrix.PACKAGER }}
          env: |
            ${{ matrix.ENVIRONMENT }}
            SCCACHE_DIST_AUTH_TOKEN=${{ secrets.GIST_REPO_READ_ORG_GITHUB_TOKEN }}
          build_command: |
            time build-cumlprims_mg-cpp -j
            time build-cuml-cpp -j

      - name: Build cugraph
        uses: ./repo/.github/actions/build-in-devcontainer
        with:
          arch: ${{ matrix.CPU_ARCH }}
          cuda: ${{ matrix.CUDA_VER }}
          python_package_manager: ${{ matrix.PACKAGER }}
          env: |
            ${{ matrix.ENVIRONMENT }}
            SCCACHE_DIST_AUTH_TOKEN=${{ secrets.GIST_REPO_READ_ORG_GITHUB_TOKEN }}
          build_command: |
            time build-cugraph-cpp -j
            time build-cugraph_etl-cpp -j
            time build-wholegraph-cpp -j
